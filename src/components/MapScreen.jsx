import React, { useEffect, useRef, useState } from "react";

const YMAPS_API_KEY = "590a209d-e5ce-4f23-bca5-27a57772be40";

function MapScreen({ onBack }) {
  const mapRef = useRef(null);
  const [filterOpen, setFilterOpen] = useState(false);

  useEffect(() => {
    const script = document.createElement("script");
    script.src = `https://api-maps.yandex.ru/2.1/?apikey=${YMAPS_API_KEY}&lang=ru_RU`;
    script.type = "text/javascript";
    script.onload = () => {
      window.ymaps.ready(() => {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤–∞
        let map = new window.ymaps.Map(mapRef.current, {
          center: [55.751244, 37.618423],
          zoom: 13,
          controls: ["zoomControl", "geolocationControl", "searchControl"],
        });

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
        map.controls.get('geolocationControl').events.add('locationchange', (e) => {
          const coords = e.get('geoObjects').get(0).geometry.getCoordinates();
          map.setCenter(coords, 14, { duration: 400 });
          loadClinics(coords);
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        loadClinics([55.751244, 37.618423]);

        function loadClinics(centerCoords) {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
          map.geoObjects.removeAll();
          // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          map.geoObjects.add(new window.ymaps.GeoObject({
            geometry: { type: "Point", coordinates: centerCoords },
            properties: { iconCaption: "–í—ã –∑–¥–µ—Å—å" }
          }, {
            preset: "islands#blueCircleDotIcon"
          }));

          // –ü–æ–∏—Å–∫ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫ —Ä—è–¥–æ–º
          window.ymaps.geocode({
            kind: "biz",
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –∫ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            boundedBy: [
              [centerCoords[0] - 0.1, centerCoords[1] - 0.2],
              [centerCoords[0] + 0.1, centerCoords[1] + 0.2]
            ],
            results: 100,
            query: "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞"
          }).then(res => {
            res.geoObjects.each(obj => {
              const meta = obj.properties.get("CompanyMetaData");
              if (!meta) return;
              const hours = meta.Hours;
              const isOpen = hours && hours.isCurrent;
              if (filterOpen && !isOpen) return;

              // –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
              const rating = meta.Ratings && meta.Ratings[0] && meta.Ratings[0].value;
              const reviews = meta.Reviews && meta.Reviews[0] && meta.Reviews[0].text;

              obj.options.set("preset", isOpen ? "islands#greenDotIcon" : "islands#grayDotIcon");
              let balloonContent = `<b>${meta.name}</b><br/>${meta.address}`;
              if (hours) {
                balloonContent += `<br/><b>${isOpen ? "üü¢ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å" : "üî¥ –ó–∞–∫—Ä—ã—Ç–æ"}</b> (${hours.text})`;
              }
              if (rating) {
                balloonContent += `<br/>‚≠êÔ∏è <b>${rating}</b>`;
              }
              if (meta.Phones && meta.Phones.length) {
                balloonContent += `<br/>‚òéÔ∏è ${meta.Phones.map((p) => p.formatted).join(", ")}`;
              }
              if (reviews) {
                balloonContent += `<br/><i>‚Äú${reviews.slice(0, 120)}...‚Äù</i>`;
              }
              obj.properties.set("balloonContent", balloonContent);
              map.geoObjects.add(obj);
            });
          });
        }
      });
    };
    document.body.appendChild(script);
    return () => {
      document.body.removeChild(script);
    };
  }, [filterOpen]);

  return (
    <div style={{ padding: 24, maxWidth: 900, margin: "0 auto" }}>
      <h2 style={{ color: "#4c38f2" }}>üêæ –ö–∞—Ä—Ç–∞ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫ (–Ø–Ω–¥–µ–∫—Å)</h2>
      <div style={{ marginBottom: 12 }}>
        <label style={{ fontWeight: 500 }}>
          <input
            type="checkbox"
            checked={filterOpen}
            onChange={e => setFilterOpen(e.target.checked)}
            style={{ marginRight: 6 }}
          />
          –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ–π—á–∞—Å
        </label>
      </div>
      <div ref={mapRef} style={{ width: "100%", height: "65vh", borderRadius: 18, boxShadow: "0 2px 14px #e6e4f7" }} />
      <button onClick={onBack} style={{ marginTop: 16 }}>–ù–∞–∑–∞–¥</button>
      <p style={{ color: "#999", marginTop: 10, fontSize: 13 }}>
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –∫–ª–∏–Ω–∏–∫–∏ —Ä—è–¥–æ–º, –≤–∏–¥–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –æ—Ç–∑—ã–≤—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.<br />
        –Ø—Ä–∫–∏–µ –º–µ—Ç–∫–∏ ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ, —Ç—É—Å–∫–ª—ã–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—ã–µ. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
      </p>
    </div>
  );
}

export default MapScreen;
