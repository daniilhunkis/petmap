import React, { useEffect, useRef, useState } from "react";

const YMAPS_API_KEY = "590a209d-e5ce-4f23-bca5-27a57772be40";

function MapScreen({ onBack }) {
  const mapRef = useRef(null);
  const [filterOpen, setFilterOpen] = useState(false);

  useEffect(() => {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (mapRef.current) mapRef.current.innerHTML = "";
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    const scriptId = "yandex-maps-script";
    let script = document.getElementById(scriptId);

    function initMap() {
      window.ymaps.ready(() => {
        // –¶–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let defaultCenter = [55.751244, 37.618423];
        // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
        const map = new window.ymaps.Map(mapRef.current, {
          center: defaultCenter,
          zoom: 13,
          controls: ["zoomControl", "geolocationControl", "searchControl"],
        });

        // –°—Ç–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        map.controls.get('geolocationControl').events.add('locationchange', (e) => {
          const coords = e.get('geoObjects').get(0).geometry.getCoordinates();
          map.setCenter(coords, 14, { duration: 400 });
        });

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ (searchControl)
        const searchControl = map.controls.get('searchControl');
        searchControl.options.set('provider', 'yandex#search');

        // –ü—Ä–∏ –ø–æ–∏—Å–∫–µ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º, –≤—ã–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
        searchControl.events.add("resultshow", () => {
          const results = searchControl.getResultsArray();
          results.forEach(obj => {
            const meta = obj.properties.get("CompanyMetaData");
            if (meta && meta.Categories) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ –ª–∏
              const isVet = meta.Categories.some(cat => 
                /–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä|–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞|–ø–∏—Ç–æ–º—Ü|–∑–æ–æ—Å–∞–ª–æ–Ω/i.test(cat.name)
              );
              if (isVet) {
                const hours = meta.Hours;
                const isOpen = hours && hours.isCurrent;
                if (filterOpen && !isOpen) return;
                obj.options.set("preset", isOpen ? "islands#greenDotIcon" : "islands#grayDotIcon");

                let balloonContent = `<b>${meta.name}</b><br/>${meta.address}`;
                if (hours) {
                  balloonContent += `<br/><b>${isOpen ? "üü¢ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å" : "üî¥ –ó–∞–∫—Ä—ã—Ç–æ"}</b> (${hours.text})`;
                }
                if (meta.Ratings && meta.Ratings[0]) {
                  balloonContent += `<br/>‚≠êÔ∏è <b>${meta.Ratings[0].value}</b>`;
                }
                if (meta.Phones && meta.Phones.length) {
                  balloonContent += `<br/>‚òéÔ∏è ${meta.Phones.map((p) => p.formatted).join(", ")}`;
                }
                if (meta.Reviews && meta.Reviews[0]) {
                  balloonContent += `<br/><i>‚Äú${meta.Reviews[0].text.slice(0, 120)}...‚Äù</i>`;
                }
                obj.properties.set("balloonContent", balloonContent);
              }
            }
          });
        });

        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ä–∞–∑—É –∏—â–µ–º "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞"
        searchControl.search("–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞");
      });
    }

    // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
    if (!script) {
      script = document.createElement("script");
      script.src = `https://api-maps.yandex.ru/2.1/?apikey=${YMAPS_API_KEY}&lang=ru_RU`;
      script.type = "text/javascript";
      script.id = scriptId;
      script.onload = initMap;
      document.body.appendChild(script);
    } else {
      if (window.ymaps && window.ymaps.ready) {
        initMap();
      } else {
        script.onload = initMap;
      }
    }

    // cleanup
    return () => {
      if (mapRef.current) mapRef.current.innerHTML = "";
    };
  }, [filterOpen]);

  return (
    <div style={{ padding: 24, maxWidth: 900, margin: "0 auto" }}>
      <h2 style={{ color: "#4c38f2" }}>üêæ –ö–∞—Ä—Ç–∞ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫ (–Ø–Ω–¥–µ–∫—Å)</h2>
      <div style={{ marginBottom: 12 }}>
        <label style={{ fontWeight: 500 }}>
          <input
            type="checkbox"
            checked={filterOpen}
            onChange={e => setFilterOpen(e.target.checked)}
            style={{ marginRight: 6 }}
          />
          –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ–π—á–∞—Å
        </label>
      </div>
      <div ref={mapRef} style={{ width: "100%", height: "65vh", borderRadius: 18, boxShadow: "0 2px 14px #e6e4f7" }} />
      <button onClick={onBack} style={{ marginTop: 16 }}>–ù–∞–∑–∞–¥</button>
      <p style={{ color: "#999", marginTop: 10, fontSize: 13 }}>
        –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–µ–±–µ, –∏—â–µ—Ç –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –Ø–Ω–¥–µ–∫—Å–∞.<br />
        –Ø—Ä–∫–∏–µ –º–µ—Ç–∫–∏ ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ, —Ç—É—Å–∫–ª—ã–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—ã–µ.<br />
        –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –ª—é–±–æ–º—É –∞–¥—Ä–µ—Å—É –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –≤ –ø–æ–∏—Å–∫–µ!
      </p>
    </div>
  );
}

export default MapScreen;
